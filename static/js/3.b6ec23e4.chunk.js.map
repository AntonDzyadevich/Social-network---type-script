{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/defaultAvatar.gif","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHook.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHook","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","photo","photos","small","large","defaultAvatar","className","s","descriptionBlock","src","Post","message","likesCount","item","alt","MyPosts","React","memo","console","log","postsElements","posts","reverse","map","p","id","key","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","error","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.b6ec23e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1zvp6\",\"item\":\"ProfileInfo_item__3h63g\"};","module.exports = __webpack_public_path__ + \"static/media/defaultAvatar.7adfc976.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__33two\",\"postsBlock\":\"MyPosts_postsBlock__3IJvT\",\"posts\":\"MyPosts_posts__A7hv0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__23TEc\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\n\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\n\r\nconst ProfileStatusWithHook: React.FC<ProfileStatusPropsType>= (props) =>  {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status] )\r\n\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"This I'am\"}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )}\r\n\r\n\r\n\r\n\r\nexport default ProfileStatusWithHook;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport {ProfilePropsType} from \"../Profile\";\r\nimport defaultAvatar from \"../../../assets/images/defaultAvatar.gif\"\r\nimport ProfileStatusWithHook from \"../ProfileStatusWithHook\";\r\n\r\n\r\nconst ProfileInfo: React.FC<ProfilePropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return < Preloader/>\r\n    }\r\n    const photo = profile.photos.small ? profile.photos.large : defaultAvatar;\r\n\r\n    return <div>\r\n        <div className={s.descriptionBlock}>\r\n            <img src={photo}/>\r\n            < ProfileStatusWithHook status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostsType} from \"../../../../Redux/profile-reducer\";\r\n\r\n\r\n\r\nconst Post:React.FC<PostsType> = ({message,likesCount}) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src=\"https://thumbs.dreamstime.com/b/happy-smiling-geek-hipster-beard-man-cool-avatar-geek-man-avatar-104871313.jpg\"\r\n                alt=\"\"/>\r\n            {message}\r\n            <div>\r\n                <span>like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport { PostsType } from '../../../Redux/profile-reducer';\r\nimport  {reduxForm,InjectedFormProps, Field} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/Preloader/FormsControls/FormsControls\";\r\n\r\n\r\n\r\n\r\nconst MyPosts:React.FC<{posts: Array<PostsType>,\r\n                        // newPostText: string,\r\n                        // updateNewPostText: (text:string) => void\r\n                        addPost: (newPostText: string) => void}> = React.memo((props) => {\r\n    console.log(\"RENDER\")\r\n    let postsElements =[...props.posts]\r\n        .reverse()\r\n        .map(p => < Post id={p.id} key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    let onAddPost = (values: any) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst  AddNewPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <Field name=\"newPostText\" component ={Textarea} placeholder={\"Post message\"}\r\n                           validate={[required, maxLength10]} />\r\n                </div>\r\n                <div>\r\n                    <button>Add post</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {RootStateType, ActionsTypes} from \"../../../types/entities\";\r\nimport {addPostAC} from '../../../Redux/profile-reducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport { ProfileType } from '../../Redux/profile-reducer';\r\n\r\n\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({profile, status,updateStatus}) => {\r\n\r\n    return <div>\r\n        < ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n        < MyPostsContainer />\r\n    </div>\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport './Profile.module.css';\r\nimport Profile from './Profile';\r\nimport { RootStateType} from \"../../types/entities\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile:(userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\ntype PathParamsType = {\r\n    userId:  string\r\n}\r\n\r\n\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType;\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType>{\r\n\r\n    componentDidMount() {\r\n\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if(!userId) {\r\n            console.error(\"ID should exist in URI params or in state('authorizedUzerId ')\")\r\n        }else{\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={ this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:RootStateType): MapStatePropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, {}, MapDispatchPropsType, RootStateType>(mapStateToProps,\r\n        {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect,\r\n) (ProfileContainer)"],"sourceRoot":""}