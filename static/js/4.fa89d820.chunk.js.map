{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","name","path","id","className","s","dialog","active","to","Message","message","maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","onSendMessageClick","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageCreator","Component","restProps"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCenKC,EAV2B,SAAC,GAAe,IAAdC,EAAa,EAAbA,KACpCC,EAAO,YAAc,CAACC,GAD2B,EAARA,IAE7C,OACI,yBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SAC7B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,KCCjBQ,EANyB,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACtC,OACI,yBAAKN,UAAWC,IAAEK,SAAUA,I,iCCI9BC,EAAcC,YAAiB,IAiBtBC,cAAwB,CAACC,KAAM,wBAA/BD,EAf0D,SAACE,GAEtE,OACI,0BAAMC,SAAUD,EAAME,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBV,KAAO,iBAAiBsB,YAAa,wBAEhD,6BAAK,6CCuBFC,EA9BT,SAACT,GAEH,IAAMU,EAAQV,EAAMW,YAEhBC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAY7B,KAAM6B,EAAE7B,KAAM8B,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,QACpF6B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAKG,EAAE/B,GAAIA,GAAI+B,EAAE/B,QAS7F,OACI,yBAAKC,UAAWC,IAAEuB,SACd,yBAAKxB,UAAWC,IAAE8B,cACbR,GAGL,yBAAKvB,UAAWC,IAAE4B,UACd,6BAAOD,GACP,6BACI,kBAAC,EAAD,CAAgBhB,SAfZ,SAACoB,GACjBrB,EAAMsB,mBAAmBD,EAAOE,uB,wBCdlCC,EAA6B,SAACd,GAChC,MAAO,CACHe,OAAQf,EAAMgB,KAAKD,S,WCiBZE,sBACXC,aAZoB,SAAClB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAGA,SAACkB,GACxB,MAAO,CACHP,mBAAoB,SAACC,GAA4BM,EAASC,YAAmBP,UDT9E,SAA8BQ,GAWjC,OAFuCH,YAAQJ,EAARI,EAPvC,SAA2B5B,GAAsC,IACxDyB,EAAwBzB,EAAxByB,OAAWO,EAD4C,YAC/BhC,EAD+B,YAE5D,OAAKyB,EAEE,kBAACM,EAAcC,GAFF,kBAAC,IAAD,CAAUvC,GAAG,gBCS1BkC,CAGblB","file":"static/js/4.fa89d820.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Cwiv\",\"dialogsItems\":\"Dialogs_dialogsItems__3UR3B\",\"active\":\"Dialogs_active__1Jb19\",\"messages\":\"Dialogs_messages__bRVWN\",\"message\":\"Dialogs_message__3EPY2\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { DialogsType } from '../../../types/entities';\r\n\r\n\r\nconst DialogItem: React.FC<DialogsType> = ({name,id}) => {\r\n    let path = \"/dialogs/\" + {id};\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {MessagesType} from \"../../../types/entities\";\r\n\r\n\r\nconst Message: React.FC<MessagesType> = ({message}) => {\r\n    return (\r\n        <div className={s.message}>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/Preloader/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\n\r\n\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name = \"newMessageBody\" placeholder= \"Enter your message\"/>\r\n            </div>\r\n            <div><button>Send</button></div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<FormDataType>({form: 'dialogAddMessageForm'}) (AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../types/entities\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\n\r\nconst Dialogs: React.FC<{onNewMessageChange: (body:string) => void,\r\n                        onSendMessageClick: (newMessageBody: string) => void,\r\n                        dialogsPage: DialogsPageType,\r\n                        isAuth: boolean\r\n} >\r\n    = (props) => {\r\n\r\n    const state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} id={m.id}/>);\r\n\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.onSendMessageClick(values.newMessageBody)\r\n    }\r\n\r\n    // if(!props.isAuth) return  <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <div>\r\n                    <AddMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React, { ComponentType } from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../types/entities\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\ntype mapStateForRedirectPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state:RootStateType):mapStateForRedirectPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>){\r\n\r\n    function RedirectComponent(props: mapStateForRedirectPropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\n","import React from 'react';\r\nimport {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsTypes, DialogsPageType, RootStateType} from '../../types/entities';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from 'redux';\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    onSendMessageClick: (newMessageBody: string) => void\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType):MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        onSendMessageClick: (newMessageBody: string) => {dispatch(sendMessageCreator(newMessageBody))}\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType,MapDispatchPropsType, {} , RootStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}